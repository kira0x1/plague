@using Kira
@using Sandbox;
@using Sandbox.UI;
@inherits PanelComponent

<root>
    @if (!ShouldShowUpgrades) return;
    <div class="upgrade-modal">
        <div class="content">
            @for (int i = 0; i < UpgradesToSpawn.Count; i++)
            {
                var card = new UpgradeCard();
                card.Upgrade = UpgradesToSpawn[i];
                card.CardIndex = i;
                SetCard(card, i);

                var tr = GetCard(i);
                <UpgradeCard @ref=@tr Upgrade=@card.Upgrade CardIndex=@i UpgradeModal=@this></UpgradeCard>
            }
        </div>
    </div>
</root>

@code
{
    [Property] public PlayerInventory Inventory { get; set; }
    [Property] public UpgradeManager UpgradeMng { get; set; }

    public bool ShouldShowUpgrades { get; set; } = false;
    public List<UpgradeInstance> UpgradesToSpawn = new List<UpgradeInstance>();

    private void SetCard(UpgradeCard card, int cardIndex)
    {
        Cards[cardIndex] = card;
    }

    public UpgradeCard GetCard(int cardIndex)
    {
        return Cards[cardIndex];
    }

    private UpgradeCard[] Cards { get; set; } = new UpgradeCard[4];

    protected override void OnAwake()
    {
        UpgradeMng.OnShowUpgradesEvent += ShowUpgrades;
    }

    public void ShowUpgrades(List<UpgradeInstance> upgrades)
    {
        ShouldShowUpgrades = true;
        Game.IsPaused = true;
        UpgradesToSpawn = upgrades;
    }

    public void OnCardClicked(int cardIndex)
    {
        var c = Cards[cardIndex];
        ShouldShowUpgrades = false;
        Game.IsPaused = false;
        UpgradeMng.OnUpgradeObtained(c.Upgrade);
    }

    /// <summary>
    /// the hash determines if the system should be rebuilt. If it changes, it will be rebuilt
    /// </summary>
    protected override int BuildHash() => System.HashCode.Combine(ShouldShowUpgrades);
}